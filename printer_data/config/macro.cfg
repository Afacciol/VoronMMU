[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 30  ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 305 ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 15.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 295  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 305  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything insight the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything insight the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything insight the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

#####################################################################
#   Macros
#####################################################################



[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

[gcode_macro PRIMING]
gcode:
# General state
  SAVE_GCODE_STATE NAME=PrePriming_state
  {% if printer.quad_gantry_level.applied == False %}
    RESPOND MSG="Priming skipped"
  {% else %}
    MMU_SYNC_GEAR_MOTOR SYNC=1
    M106 S255                      ;partcooling fan max
    M204 S6000
    G1  X20 Y298 F8000               ;move to purge position
    G1  Z0.3 F3000                 ;move to purge position
    G91                            ;incremental positioning
    G1  Z0.2 E15 F3                ;prime hotend
    G1  Z2.0 E12 F30               ;purge and move up
    G1  Z4.0 E8 F60               ;purge and move up
    G1  Z2.0 E1 F240              ;purge and move up
    G1  Z2 E-0.6 F600
    # G1  Z2 E-0.1 F150
    # G1  Z6 E-0.1 F50
    # G1  Z10 F3000                  ;move up by 10
    # G1  E-2 F1100
    G1  Y7 F600
    G1  Y-19 Z-10.2 F1000          ;move to wiping start
    G1  Y17 F5000                 ;wipe forth
    G1  Y-8 F5000                  ;wipe back
    G1  Y5 F5000                ;wipe forth
    G1  Y-10 F5000                  ;wipe back
    G1  Y5 F5000                ;wipe forth
    G1  Y-5 F5000                  ;wipe back
    G1  Y5 F5000                ;wipe forth
    G1  Y-5 F5000                  ;wipe back
    M107                           ;turn cooling fan off
    G1  Z2.0  F3000                ;move up
    M82                            ;extruder absolute
    G92 E0.0                       ;extruder reset
    G90                            ;absolute positioning
    M107                           ;partcooling fan off
    RESPOND MSG="I Pooped!"
  {% endif %}
  RESTORE_GCODE_STATE NAME=PrePriming_state

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=_beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=_beeper VALUE=0
        G4 P{dur}
    {% endfor %}

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    SET_FAN_SPEED FAN=nevermore SPEED=0   ; NEVERMORE filter off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off

# [gcode_macro CLEAN_NOZZLE]
# 
# variable_start_x: 125
# variable_start_y: 306
# variable_start_z: 3.0
# variable_wipe_dist: -37
# variable_wipe_qty: 5
# variable_wipe_spd: 200
# variable_raise_distance: 10
# variable_purgue_temp: 200
# variable_purgue_lenght: 15 #mm
# variable_purgue_retract: 1 #mm
#
#
# gcode: 
#  M104 S{purgue_temp}	# preheat nozzle
#  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purgue_temp-10} MAXIMUM={purgue_temp+10}   # Wait for hotend temp
#  {% if "xyz" not in printer.toolhead.homed_axes %} # check Home state
#    G28
#  {% endif %}
#  G21 ; set units to millimeters
#  G90   # absolute positioning 
#  G0 X{start_x} Y{start_y} Z{start_z} F6000 # MOVE TO BUCKET
#  M109 S{purgue_temp}
#  {% for wipes in range(1, (wipe_qty + 1)) %} # Wipe nozzle (loop)
#    G0 X{start_x + wipe_dist} F{wipe_spd * 60}
#    G0 X{start_x} F{wipe_spd * 60}
#  {% endfor %}
#  M106 S255 #power on fan to cool down the nozzle
#  M104 S150 # wait till nozzle cools down
#  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=120 MAXIMUM=150   # Wait for hotend temp
#  M106 S0
#  {% for wipes in range(1, (wipe_qty + 1)) %} # Wipe nozzle (loop)
#    G0 X{start_x + wipe_dist} F{wipe_spd * 60}
#    G0 X{start_x} F{wipe_spd * 60}
#  {% endfor %}
#  G0 Z{raise_distance} # Raise nozzle

 
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  





######################################################################
# G-CODE MARLIN FILTER
######################################################################
[gcode_macro M109]
rename_existing: M109109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M106] # fileter if M106 have P3 and it's value
rename_existing: G106
gcode:
    {% if params.P is defined %}
        {% if params.P|int == 3 %}
            {% if params.S is defined %}
                {% if params.S|int == 255 %}
                    {% set realspeed = 1 %}
                {% else %}
                    {% if params.S|int == 0 %}
                        {% set realspeed = 0 %}
                    {% else %}
                        {% set realspeed = params.S|float/255 %}
                    {% endif %}
                {% endif %}
            {% else %}
                {% set realspeed = 1 %}
            {% endif %}

            SET_FAN_SPEED FAN=exhaust_fan SPEED={realspeed}
        {% endif %}
    {% else %}
        {% if params.S is defined %}
          G106 S{params.S}
        {% else %}
          G106 S255
        {% endif %}
    {% endif %}


[gcode_macro G29]
gcode:
    G28
    BED_MESH_CALIBRATE
    G0 X0 Y0 Z10 F6000
    BED_MESH_PROFILE save=G29mesh
    SAVE_CONFIG

[gcode_macro M300]
gcode:
  BEEP

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    # _COLORCHANGE #solo si la impresora habla
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro G32]
gcode:
  # Checks if the bed temp is higher than 60c - if so then trigger a heatsoak.
  {% if printer.heater_bed.temperature > 50 %}
    M140 S55                                  # Sets the target temp for the bed and wait
    M109 S150
    # TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 60c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
  
    M190 S55                                  # Sets the target temp for the bed and wait
    M104 S150
    # not convinced that is needed for PLA and the likes
    G4 P50000                                          # Waits x min for the bedtemp to stabilize
  {% endif %}
  BED_MESH_CLEAR
  G28
  QUAD_GANTRY_LEVEL
  G28 Z


[gcode_macro _GEN_PREHEAT]
gcode:
  M104 S150
  M140 S55



######################################################################
# KLIPPERSCREEN MACROS
######################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(60) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    RUN_SHELL_COMMAND CMD=tts PARAMS="'Loading filament'" # beep
    G91
    G92 E0
    G1 E30 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state
    M300

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(60) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    RUN_SHELL_COMMAND CMD=tts PARAMS="'Unloading filament'" # beep
    G92 E0
    G1 E10 F{speed} # purge
    G1 E-50 F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
    M300
